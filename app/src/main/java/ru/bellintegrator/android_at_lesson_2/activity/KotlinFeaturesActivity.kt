package ru.bellintegrator.android_at_lesson_2.activity

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import ru.bellintegrator.android_at_lesson_2.R

class KotlinFeaturesActivity : AppCompatActivity() {
    private lateinit var recyclerView: RecyclerView
    private lateinit var kotlinFeaturesAdapter: KotlinFeaturesAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_kotlin_features)

        // Получение ссылки на cardKotlinFeatures
        recyclerView = findViewById(R.id.kotlin_recycler_view)

        // Создание списка функций
        val features = generateKotlinFeatures()

        // Установка layoutManager
        recyclerView.layoutManager = LinearLayoutManager(this)

        // Создание адаптера
        kotlinFeaturesAdapter = KotlinFeaturesAdapter(features)

        // Присоединение адаптера к RecyclerView
        recyclerView.adapter = kotlinFeaturesAdapter
    }

    private fun generateKotlinFeatures(): List<KotlinFeature> {
        return listOf(
            KotlinFeature(
                "Null Safety",
                "Позволяет избежать NullPointerException.",
                "Kotlin имеет встроенную поддержку null safety," +
                    " которая помогает разработчикам избегать ошибок времени выполнения, связанных с нулевыми значениями.",
            ),
            KotlinFeature(
                "Data Classes",
                "Автоматически генерирует методы equals(), hashCode(), toString().",
                "Данные классы позволяют создавать объекты, которые содержат только данные," +
                    " при этом автоматически создаются методы сравнения объектов, хеширования и преобразования в строку.",
            ),
            KotlinFeature(
                "Extension Functions",
                "Расширяют возможности существующих классов.",
                "Эти функции позволяют добавлять новые методы к существующим классам," +
                    " даже если у вас нет доступа к исходному коду этих классов.",
            ),
            KotlinFeature(
                "Smart Casts",
                "Автоматическое приведение типов.",
                "Kotlin может автоматически приводить типы после проверки их совместимости, что упрощает работу с объектами разных типов.",
            ),
            KotlinFeature(
                "Ranges",
                "Упрощают работу с диапазонами значений.",
                "Диапазоны в Kotlin позволяют удобно работать с последовательностями чисел или символов, используя операторы '..' и 'in'.",
            ),
            KotlinFeature(
                "Delegated Properties",
                "Делегирование свойств другим объектам.",
                "Эта функция позволяет делегировать реализацию свойства другому объекту, что делает код более чистым и модульным.",
            ),
            KotlinFeature(
                "Coroutines",
                "Легковесная многозадачность.",
                "Корутины предоставляют простой способ работы с асинхронностью и параллелизмом, позволяя писать неблокирующий код.",
            ),
            KotlinFeature(
                "Sealed Classes",
                "Ограничивают иерархию наследования.",
                "Запечатанные классы ограничивают возможные подклассы," +
                    " что полезно для безопасного использования паттернов типа State Machine.",
            ),
            KotlinFeature(
                "Inline Functions",
                "Уменьшают накладные расходы на вызовы функций.",
                "Инлайновые функции компилируются прямо в месте вызова," +
                    " что уменьшает накладные расходы на вызов функции и улучшает производительность.",
            ),
            KotlinFeature(
                "Higher-Order Functions",
                "Функции как аргументы и возвращаемые значения.",
                "Высшие порядки функций позволяют передавать функции в качестве аргументов и возвращаемых значений," +
                    " что дает большую гибкость и возможность абстракций.",
            ),
            KotlinFeature(
                "Type Aliases",
                "Создание псевдонимов для сложных типов.",
                "Типовые синонимы позволяют давать удобные имена длинным или сложным типам, делая код более читаемым.",
            ),
            KotlinFeature(
                "Operator Overloading",
                "Перегрузка операторов для пользовательских типов.",
                "Kotlin поддерживает перегрузку операторов," +
                    " что позволяет использовать стандартные математические операции (+, -, *, / и др.) с пользовательскими типами данных.",
            ),
            KotlinFeature(
                "Lazy Initialization",
                "Отложенная инициализация.",
                "Ленивая инициализация позволяет отложить создание объекта до момента первого обращения к нему, " +
                    "что экономит ресурсы и ускоряет запуск приложения.",
            ),
            KotlinFeature(
                "Companion Objects",
                "Альтернатива статическим членам класса.",
                "Компаньон-объекты заменяют статические члены класса в Java," +
                    " предоставляя удобный синтаксис для работы с общими методами и свойствами.",
            ),
            KotlinFeature(
                "When Expression",
                "Многофункциональный оператор выбора.",
                "Оператор when является мощным инструментом для замены switch-case конструкций," +
                    " позволяя выполнять сложные условия и возвращаться разными типами данных.",
            ),
            KotlinFeature(
                "Destructuring Declarations",
                "Разбиение объектов на отдельные переменные.",
                "Деконструкция позволяет разбивать объекты на отдельные переменные," +
                    " что особенно полезно при работе с парами, тройками и другими структурами данных.",
            ),
            KotlinFeature(
                "Functional Programming Support",
                "Богатые возможности функционального программирования.",
                "Kotlin предоставляет множество инструментов для функционального программирования," +
                    " таких как функции высшего порядка, лямбды, замыкания и другие.",
            ),
            KotlinFeature(
                "Infix Notation",
                "Удобный синтаксис для бинарных операций.",
                "Инфиксная нотация позволяет записывать бинарные операции между двумя аргументами" +
                    " без необходимости указывать имя функции," +
                    " что делает код более читабельным.",
            ),
            KotlinFeature(
                "Reified Type Parameters",
                "Реализация обобщенных типов.",
                "Реифицированные параметры типа позволяют получать доступ к конкретным типам внутри обобщенного кода," +
                    " что невозможно в Java.",
            ),
            KotlinFeature(
                "DSL Support",
                "Создание предметно-ориентированных языков.",
                "Kotlin поддерживает создание DSL (Domain Specific Languages)," +
                    " что позволяет разрабатывать специализированные языки для конкретных задач.",
            ),
            KotlinFeature(
                "Flows",
                "Потоки данных для реактивной обработки.",
                "Потоки в Kotlin позволяют обрабатывать потоки данных реактивным образом," +
                    " обеспечивая удобство работы с асинхронными операциями.",
            ),
            KotlinFeature(
                "Contracts",
                "Контракты для улучшения статической типизации.",
                "Контракты позволяют определять поведение функций," +
                    " что улучшает статический анализ кода и повышает безопасность приложений.",
            ),
            KotlinFeature(
                "Multiplatform Support",
                "Кросс-платформенность.",
                "Kotlin поддерживает разработку приложений для нескольких платформ," +
                    " включая JVM, JS и нативные платформы, такие как iOS и Linux.",
            ),
            KotlinFeature(
                "Experimental Features",
                "Экспериментальные возможности.",
                "Kotlin активно развивается, предлагая экспериментальные функции, которые могут стать частью стандартного языка в будущем.",
            ),
        )
    }
}
